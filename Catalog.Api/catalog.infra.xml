<?xml version="1.0"?>
<doc>
    <assembly>
        <name>catalog.infra</name>
    </assembly>
    <members>
        <member name="T:catalog.infra.DataContext.DatabaseComunicator">
            <summary>
            Realiza a comunicação com o banco de dados
            </summary>
        </member>
        <member name="M:catalog.infra.DataContext.DatabaseComunicator.#ctor(catalog.infra.DataContext.StoreDataContext)">
            <summary>
            Constructor
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:catalog.infra.DataContext.DatabaseComunicator.GetConnection">
            <summary>
            Cria uma nova conexão com o banco de dados
            </summary>
            <returns></returns>
        </member>
        <member name="M:catalog.infra.DataContext.DatabaseComunicator.GetCommand(System.Data.IDbConnection)">
            <summary>
            Cria uma linha de comando 
            </summary>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:catalog.infra.DataContext.DatabaseComunicator.GetReader(System.Data.IDbCommand)">
            <summary>
            Executa um reader 
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:catalog.infra.DataContext.DatabaseComunicator.GetParameters(System.Data.IDbCommand,System.String,System.Object)">
             <summary>
             Cria parametros para a transação executada
            </summary>
             <param name="command"></param>
             <param name="name"></param>
             <param name="value"></param>
        </member>
        <member name="M:catalog.infra.DataContext.DatabaseComunicator.GetResponseDatabase(System.Data.IDbConnection,System.Data.IDbTransaction,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Realiza a execução de uma stored procedure no banco de dados
            </summary>
            <param name="connection"></param>
            <param name="transaction"></param>
            <param name="procedureName"></param>
            <param name="parameterSQL"></param>
            <returns></returns>
        </member>
        <member name="M:catalog.infra.DataContext.DatabaseComunicator.GetResponse(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Executa uma transação no banco de dados conforme a procedure desejada
            </summary>
            <param name="proceduceName"></param>
            <param name="parameterSQL"></param>
            <returns></returns>
        </member>
        <member name="T:catalog.infra.DataContext.StoreDataContext">
            <summary>
            Contexto do banco de dados
            </summary>
        </member>
        <member name="M:catalog.infra.DataContext.StoreDataContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{catalog.infra.DataContext.StoreDataContext})">
            <summary>
            Constructor
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:catalog.infra.DataContext.StoreDataContext.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:catalog.infra.DataContext.TransactionSession">
            <summary>
            Responsável por executar a procedure
            </summary>
        </member>
        <member name="T:catalog.infra.DataContext.TransactionSession.Execution`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="T:catalog.infra.DataContext.TransactionSession.Execution">
            <summary>
            
            </summary>
            <param name="transaction"></param>
        </member>
        <member name="M:catalog.infra.DataContext.TransactionSession.#ctor(System.Data.IDbConnection)">
            <summary>
            Constructor
            </summary>
            <param name="sqlcon"></param>
        </member>
        <member name="M:catalog.infra.DataContext.TransactionSession.Execute``1(catalog.infra.DataContext.TransactionSession.Execution{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="exec"></param>
            <returns></returns>
        </member>
        <member name="M:catalog.infra.DataContext.TransactionSession.Exec``1(catalog.infra.DataContext.TransactionSession.Execution{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="exec"></param>
        </member>
        <member name="T:catalog.infra.Repositories.CatalogBrandRepository">
            <summary>
            Classe de que faz conexão com o repositorio de Marcas de produtos
            </summary>
        </member>
        <member name="M:catalog.infra.Repositories.CatalogBrandRepository.#ctor(catalog.infra.DataContext.DatabaseComunicator)">
            <summary>
            Constructor
            </summary>
            <param name="database"></param>
        </member>
        <member name="M:catalog.infra.Repositories.CatalogBrandRepository.CatalogBrandIdAsync(System.Int32)">
            <summary>
            Recupera uma marca de produto conforme o id 
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:catalog.infra.Repositories.CatalogBrandRepository.CatalogBrandsAsync(System.Int32,System.Int32)">
            <summary>
            Lista todas as marcas conforme paginação
            </summary>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:catalog.infra.Repositories.CatalogBrandRepository.CreateBrandAsync(Catalog.Core.Entities.CatalogBrand)">
            <summary>
            Cria uma nova marca no repositorio
            </summary>
            <param name="brand"></param>
            <returns></returns>
        </member>
        <member name="M:catalog.infra.Repositories.CatalogBrandRepository.UpdateBrandAsync(Catalog.Core.Entities.CatalogBrand)">
            <summary>
            Atualiza uma marca de produto no repositorio
            </summary>
            <param name="brand"></param>
            <returns></returns>
        </member>
        <member name="T:catalog.infra.Repositories.CatalogItemRepository">
            <summary>
            Classe responsável por popular o repositorio de produtos
            </summary>
        </member>
        <member name="M:catalog.infra.Repositories.CatalogItemRepository.#ctor(catalog.infra.DataContext.DatabaseComunicator)">
            <summary>
            Contructor
            </summary>
            <param name="database"></param>
        </member>
        <member name="M:catalog.infra.Repositories.CatalogItemRepository.CreateProductAsync(Catalog.Core.Entities.CatalogItem)">
            <summary>
            Cria um novo produto
            </summary>
            <param name="product"></param>
            <returns></returns>
        </member>
        <member name="M:catalog.infra.Repositories.CatalogItemRepository.GetItemsByIdsAsync(System.Int32,System.Int32)">
            <summary>
            Realiza uma query(consulta) com base nos parametros
            </summary>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:catalog.infra.Repositories.CatalogItemRepository.ItemByIdAsync(System.Int32)">
            <summary>
            Realiza uma query(consulta) com base nos parametros
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:catalog.infra.Repositories.CatalogItemRepository.ItemsByBrandIdAsync(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            Realiza uma query(consulta) com base nos parametros
            </summary>
            <param name="catalogBrandId"></param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:catalog.infra.Repositories.CatalogItemRepository.ItemsByTypeIdAndBrandIdAsync(System.Int32,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            Realiza uma query(consulta) com base nos parametros
            </summary>
            <param name="catalogTypeId"></param>
            <param name="catalogBrandId"></param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:catalog.infra.Repositories.CatalogItemRepository.ItemsByTypeIdAsync(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            Realiza uma query(consulta) com base nos parametros
            </summary>
            <param name="catalogTypeId"></param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:catalog.infra.Repositories.CatalogItemRepository.ItemsWithNameAsync(System.String,System.Int32,System.Int32)">
            <summary>
            Realiza uma query(consulta) com base nos parametros
            </summary>
            <param name="name"></param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:catalog.infra.Repositories.CatalogItemRepository.UpdateProductAsync(Catalog.Core.Entities.CatalogItem,System.Boolean)">
            <summary>
            Atualiza os dados do produto
            </summary>
            <param name="product"></param>
            <param name="raiseProductPriceChangedEvent"></param>
            <returns></returns>
        </member>
        <member name="T:catalog.infra.Repositories.CatalogTypeRepository">
            <summary>
            Classe responsável por implementar os repositorio de tipos de produtos
            </summary>
        </member>
        <member name="M:catalog.infra.Repositories.CatalogTypeRepository.#ctor(catalog.infra.DataContext.DatabaseComunicator)">
            <summary>
            Constructor
            </summary>
            <param name="database"></param>
        </member>
        <member name="M:catalog.infra.Repositories.CatalogTypeRepository.CatalogTypeById(System.Int32)">
            <summary>
            Realiza uma query(consulta) com base nos parametros
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:catalog.infra.Repositories.CatalogTypeRepository.CatalogTypesAsync(System.Int32,System.Int32)">
            <summary>
            Realiza uma query(consulta) com base nos parametros
            </summary>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:catalog.infra.Repositories.CatalogTypeRepository.CreateTypeAsync(Catalog.Core.Entities.CatalogType)">
            <summary>
            Cria um tipo de produto na base de dados
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:catalog.infra.Repositories.CatalogTypeRepository.UpdateTypeAsync(Catalog.Core.Entities.CatalogType)">
            <summary>
            Atualiza um tipo de produto na base de dados
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
    </members>
</doc>
